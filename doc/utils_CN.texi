@chapter 语法
@c man begin SYNTAX

本文描述了libavutil库提供的一些通用特性和实用程序。

@anchor{quoting_and_escaping}
@section 引用和转义

FFmpeg采用以下引用和转义机制，除非显式指定。以下规则适用:

@itemize
@item
@samp{'} 和 @samp{\} 是特殊的字符(分别用于引用和转义)。
除了它们之外，还可能有其他特殊字符，取决于所使用的转义和引用的特定语法。

@item
一个特殊的字符是通过用@samp{\} 来转义的。

@item
@samp{''} 的所有字符都包含在已解析的字符串中，引用字符 @samp{'} 本身不能被引用，
因此您可能需要关闭引用并避免使用它。

@item
除非转义或引用，否则将从已解析的字符串中删除。
@end itemize

注意，在使用命令行或脚本时，您可能需要添加第二个级别的转义,
这取决于所采用的shell语言的语法。

函数@code{av_get_token}定义在@file{libavutil/avstring.h}中，可以被用途解析token或者转义的规则，
转义的规则就是上面介绍的那些规则。

在FFmpeg的源代码目录中，@file{tools/ffescape}是可以用来自动解析转义字符的脚本。

@subsection 举例

@itemize
@item
字符串@code{Crime d'Amour}中包含@code{'}字符
@example
Crime d\'Amour
@end example

@item
上面的字符串包含引用，所以@code{'}需要转义一下：
@example
'Crime d'\''Amour'
@end example

@item
在前边或者后边有空白符号的话，例如这样：
@example
'  this string starts and ends with whitespaces  '
@end example

@item
转义和引用可以混合使用，例如：
@example
' The string '\'string\'' is a string '
@end example

@item
包含 @samp{\} 可以使用转义或引用：
@example
'c:\foo' can be written as c:\\foo
@end example
@end itemize

@anchor{date syntax}
@section 日期

接受的语法如下：
@example
[(YYYY-MM-DD|YYYYMMDD)[T|t| ]]((HH:MM:SS[.m...]]])|(HHMMSS[.m...]]]))[Z]
now
@end example

如果值是 "now" 则是获取当前时间。

时间是本地时间，除非Z被追加，在这种情况下，它被解释为UTC。如果year-month-day部分没有指定的话，就是获得当前的year-month-day。

@anchor{time duration syntax}
@section duration时间

duration可以支持两种表达方式：
There are two accepted syntaxes for expressing time duration.

@example
[-][@var{HH}:]@var{MM}:@var{SS}[.@var{m}...]
@end example

@var{HH} 表示小时, @var{MM} 表示分钟，最大的两个数字 和 @var{SS} 表示秒的最大的两个数字，@var{m} 表示@var{SS}之后的小数部分。

@emph{or}

@example
[-]@var{S}+[.@var{m}...]
@end example

@var{S} 表示秒数，包含可选的小数部分@var{m}.

两种表达方式中，可以用@samp{-}表示负时间。

@subsection 举例

下面是所有关于duration的表示的例子：

@table @samp
@item 55
55 秒

@item 12:03:45
12 小时, 03 分钟 和 45 秒

@item 23.189
23.189 秒
@end table

@anchor{video size syntax}
@section 视频分辨率大小
指定源视频的大小，它可能是一个字符串形式的widthxheight，或者一个大小缩写的名称

以下缩写是公认的:
@table @samp
@item ntsc
720x480
@item pal
720x576
@item qntsc
352x240
@item qpal
352x288
@item sntsc
640x480
@item spal
768x576
@item film
352x240
@item ntsc-film
352x240
@item sqcif
128x96
@item qcif
176x144
@item cif
352x288
@item 4cif
704x576
@item 16cif
1408x1152
@item qqvga
160x120
@item qvga
320x240
@item vga
640x480
@item svga
800x600
@item xga
1024x768
@item uxga
1600x1200
@item qxga
2048x1536
@item sxga
1280x1024
@item qsxga
2560x2048
@item hsxga
5120x4096
@item wvga
852x480
@item wxga
1366x768
@item wsxga
1600x1024
@item wuxga
1920x1200
@item woxga
2560x1600
@item wqsxga
3200x2048
@item wquxga
3840x2400
@item whsxga
6400x4096
@item whuxga
7680x4800
@item cga
320x200
@item ega
640x350
@item hd480
852x480
@item hd720
1280x720
@item hd1080
1920x1080
@item 2k
2048x1080
@item 2kflat
1998x1080
@item 2kscope
2048x858
@item 4k
4096x2160
@item 4kflat
3996x2160
@item 4kscope
4096x1716
@item nhd
640x360
@item hqvga
240x160
@item wqvga
400x240
@item fwqvga
432x240
@item hvga
480x320
@item qhd
960x540
@item 2kdci
2048x1080
@item 4kdci
4096x2160
@item uhd2160
3840x2160
@item uhd4320
7680x4320
@end table

@anchor{video rate syntax}
@section 视频帧率

指定视频的帧速率，表示为每秒生成的帧数。它必须是格式@var{frame_rate_num}/@var{frame_rate_den}格式的字符串，
一个整数编号，一个浮点数或一个有效的视频帧速率缩写。

以下缩写是公认的:
@table @samp
@item ntsc
30000/1001
@item pal
25/1
@item qntsc
30000/1001
@item qpal
25/1
@item sntsc
30000/1001
@item spal
25/1
@item film
24/1
@item ntsc-film
24000/1001
@end table

@anchor{ratio syntax}
@section 比率

比率可以表示为表达式，也可以用@var{numerator}:@var{denominator}的形式表示。

请注意，与无穷大(1/0)或负数的比率被认为是有效的，
所以如果您想要排除这些值，您应该检查返回的值。

未定义的值可以使用“0:0”字符串表示。

@anchor{color syntax}
@section 颜色

它可以是下面定义的颜色的名称(大小写不敏感匹配)，或者是一个@code{[0x|#]RRGGBB[AA]}序列，
可能后面是@@和表示alpha组件的字符串。

alpha组件可能是一个由“0x”组成的字符串，后面是一个十六进制数字，或者在@samp{0.0}和@samp{1.0}之间的十进制数，
这表示不透明度值(“0x00”或“0.0”表示完全透明,“@samp{0xff}”或“@samp{1.0}”完全不透明)。
如果没有指定alpha组件，则假定为“@samp{0xff}”。

字符串@samp{random} 将会随机选择一个颜色。

下列颜色的名称被识别：
@table @samp
@item AliceBlue
0xF0F8FF
@item AntiqueWhite
0xFAEBD7
@item Aqua
0x00FFFF
@item Aquamarine
0x7FFFD4
@item Azure
0xF0FFFF
@item Beige
0xF5F5DC
@item Bisque
0xFFE4C4
@item Black
0x000000
@item BlanchedAlmond
0xFFEBCD
@item Blue
0x0000FF
@item BlueViolet
0x8A2BE2
@item Brown
0xA52A2A
@item BurlyWood
0xDEB887
@item CadetBlue
0x5F9EA0
@item Chartreuse
0x7FFF00
@item Chocolate
0xD2691E
@item Coral
0xFF7F50
@item CornflowerBlue
0x6495ED
@item Cornsilk
0xFFF8DC
@item Crimson
0xDC143C
@item Cyan
0x00FFFF
@item DarkBlue
0x00008B
@item DarkCyan
0x008B8B
@item DarkGoldenRod
0xB8860B
@item DarkGray
0xA9A9A9
@item DarkGreen
0x006400
@item DarkKhaki
0xBDB76B
@item DarkMagenta
0x8B008B
@item DarkOliveGreen
0x556B2F
@item Darkorange
0xFF8C00
@item DarkOrchid
0x9932CC
@item DarkRed
0x8B0000
@item DarkSalmon
0xE9967A
@item DarkSeaGreen
0x8FBC8F
@item DarkSlateBlue
0x483D8B
@item DarkSlateGray
0x2F4F4F
@item DarkTurquoise
0x00CED1
@item DarkViolet
0x9400D3
@item DeepPink
0xFF1493
@item DeepSkyBlue
0x00BFFF
@item DimGray
0x696969
@item DodgerBlue
0x1E90FF
@item FireBrick
0xB22222
@item FloralWhite
0xFFFAF0
@item ForestGreen
0x228B22
@item Fuchsia
0xFF00FF
@item Gainsboro
0xDCDCDC
@item GhostWhite
0xF8F8FF
@item Gold
0xFFD700
@item GoldenRod
0xDAA520
@item Gray
0x808080
@item Green
0x008000
@item GreenYellow
0xADFF2F
@item HoneyDew
0xF0FFF0
@item HotPink
0xFF69B4
@item IndianRed
0xCD5C5C
@item Indigo
0x4B0082
@item Ivory
0xFFFFF0
@item Khaki
0xF0E68C
@item Lavender
0xE6E6FA
@item LavenderBlush
0xFFF0F5
@item LawnGreen
0x7CFC00
@item LemonChiffon
0xFFFACD
@item LightBlue
0xADD8E6
@item LightCoral
0xF08080
@item LightCyan
0xE0FFFF
@item LightGoldenRodYellow
0xFAFAD2
@item LightGreen
0x90EE90
@item LightGrey
0xD3D3D3
@item LightPink
0xFFB6C1
@item LightSalmon
0xFFA07A
@item LightSeaGreen
0x20B2AA
@item LightSkyBlue
0x87CEFA
@item LightSlateGray
0x778899
@item LightSteelBlue
0xB0C4DE
@item LightYellow
0xFFFFE0
@item Lime
0x00FF00
@item LimeGreen
0x32CD32
@item Linen
0xFAF0E6
@item Magenta
0xFF00FF
@item Maroon
0x800000
@item MediumAquaMarine
0x66CDAA
@item MediumBlue
0x0000CD
@item MediumOrchid
0xBA55D3
@item MediumPurple
0x9370D8
@item MediumSeaGreen
0x3CB371
@item MediumSlateBlue
0x7B68EE
@item MediumSpringGreen
0x00FA9A
@item MediumTurquoise
0x48D1CC
@item MediumVioletRed
0xC71585
@item MidnightBlue
0x191970
@item MintCream
0xF5FFFA
@item MistyRose
0xFFE4E1
@item Moccasin
0xFFE4B5
@item NavajoWhite
0xFFDEAD
@item Navy
0x000080
@item OldLace
0xFDF5E6
@item Olive
0x808000
@item OliveDrab
0x6B8E23
@item Orange
0xFFA500
@item OrangeRed
0xFF4500
@item Orchid
0xDA70D6
@item PaleGoldenRod
0xEEE8AA
@item PaleGreen
0x98FB98
@item PaleTurquoise
0xAFEEEE
@item PaleVioletRed
0xD87093
@item PapayaWhip
0xFFEFD5
@item PeachPuff
0xFFDAB9
@item Peru
0xCD853F
@item Pink
0xFFC0CB
@item Plum
0xDDA0DD
@item PowderBlue
0xB0E0E6
@item Purple
0x800080
@item Red
0xFF0000
@item RosyBrown
0xBC8F8F
@item RoyalBlue
0x4169E1
@item SaddleBrown
0x8B4513
@item Salmon
0xFA8072
@item SandyBrown
0xF4A460
@item SeaGreen
0x2E8B57
@item SeaShell
0xFFF5EE
@item Sienna
0xA0522D
@item Silver
0xC0C0C0
@item SkyBlue
0x87CEEB
@item SlateBlue
0x6A5ACD
@item SlateGray
0x708090
@item Snow
0xFFFAFA
@item SpringGreen
0x00FF7F
@item SteelBlue
0x4682B4
@item Tan
0xD2B48C
@item Teal
0x008080
@item Thistle
0xD8BFD8
@item Tomato
0xFF6347
@item Turquoise
0x40E0D0
@item Violet
0xEE82EE
@item Wheat
0xF5DEB3
@item White
0xFFFFFF
@item WhiteSmoke
0xF5F5F5
@item Yellow
0xFFFF00
@item YellowGreen
0x9ACD32
@end table

@anchor{channel layout syntax}
@section 声道布局

声道布局指定多声道音频流中的声道的空间配置。
为了指定声道布局，FFmpeg使用一种特殊的语法。

单个通道由id标识，如下表所给出：
@table @samp
@item FL
前左
@item FR
前右
@item FC
前中央
@item LFE
低频
@item BL
后左
@item BR
后右
@item FLC
前、中间的左侧
@item FRC
前、中间的右侧
@item BC
后、中央
@item SL
左侧面
@item SR
右侧面
@item TC
上、中央
@item TFL
上、前、左
@item TFC
上、前、中央
@item TFR
上、前、右
@item TBL
上、后、左
@item TBC
上、后、中央
@item TBR
上、后、右
@item DL
下混合、左
@item DR
下混合、右
@item WL
向左扩大
@item WR
向右扩大
@item SDL
向左环绕
@item SDR
向右环绕
@item LFE2
低频2
@end table

可以使用以下标识符指定标准通道布局组合：
@table @samp
@item mono
FC
@item stereo
FL+FR
@item 2.1
FL+FR+LFE
@item 3.0
FL+FR+FC
@item 3.0(back)
FL+FR+BC
@item 4.0
FL+FR+FC+BC
@item quad
FL+FR+BL+BR
@item quad(side)
FL+FR+SL+SR
@item 3.1
FL+FR+FC+LFE
@item 5.0
FL+FR+FC+BL+BR
@item 5.0(side)
FL+FR+FC+SL+SR
@item 4.1
FL+FR+FC+LFE+BC
@item 5.1
FL+FR+FC+LFE+BL+BR
@item 5.1(side)
FL+FR+FC+LFE+SL+SR
@item 6.0
FL+FR+FC+BC+SL+SR
@item 6.0(front)
FL+FR+FLC+FRC+SL+SR
@item hexagonal
FL+FR+FC+BL+BR+BC
@item 6.1
FL+FR+FC+LFE+BC+SL+SR
@item 6.1
FL+FR+FC+LFE+BL+BR+BC
@item 6.1(front)
FL+FR+LFE+FLC+FRC+SL+SR
@item 7.0
FL+FR+FC+BL+BR+SL+SR
@item 7.0(front)
FL+FR+FC+FLC+FRC+SL+SR
@item 7.1
FL+FR+FC+LFE+BL+BR+SL+SR
@item 7.1(wide)
FL+FR+FC+LFE+BL+BR+FLC+FRC
@item 7.1(wide-side)
FL+FR+FC+LFE+FLC+FRC+SL+SR
@item octagonal
FL+FR+FC+BL+BR+BC+SL+SR
@item downmix
DL+DR
@end table

自定义声道布局可以指定为一个序列，可以用'+' 或 '|' 分隔：
@itemize
@item
标准通道布局的名称（例如：@samp{mono},@samp{stereo}, @samp{4.0}, @samp{quad}, @samp{5.0}, 等）

@item
单声道布局的名称（例如：@samp{FL}, @samp{FR}, @samp{FC}, @samp{LFE}，等）

@item
在十进制中，有许多声道，后面是“c”，为该声道提供默认的通道布局。（参考@code{av_get_default_channel_layout}），
注意，并非所有声道计数都有一个默认的布局。

@item
在十进制中，有许多声道，后面是“C”，以指定的声道数目生成一个未知的声道布局。
注意，不是所有的声道布局规范字符串都支持未知的声道布局

@item
一个通道布局掩码，以十六进制开始，以“0x”开头（参考@file{libavutil/channel_layout.h}中定义的@code{AV_CH_*}宏）
@end itemize

在libavutil version 53 之前，后面的字符“c”指定许多声道是可选的，但是现在必选的，
而声道布局掩码也可以被指定为十进制数(如果不跟随“c”或“c”)。

参考@file{libavutil/channel_layout.h}中电仪的@code{av_get_channel_layout}
@c man end SYNTAX

@chapter 表达式求值
@c man begin EXPRESSION EVALUATION

当计算一个算术表达式时，FFmpeg使用内部公式求值器，在@file{libavutil/eval.h}中实现的接口。

表达式可能包含一元、二进制运算符、常量和函数。

两个表达式@var{expr1}和@var{expr2}可以组合在一起形成另一个表达式“@var{expr1};@var{expr2}”。
对@var{expr1}和@var{expr2}进行了相应的评估，新表达式求值为@var{expr2}的值。

下面的二进制操作符是可用的: @code{+}, @code{-}, @code{*}, @code{/}, @code{^}.

以下的一元运算符是可用的: @code{+}, @code{-}.

下面的函数是可用的：
@table @option
@item abs(x)
计算 @var{x} 的绝对值.

@item acos(x)
计算 @var{x} 的反余弦.

@item asin(x)
计算 @var{x} 的反正弦.

@item atan(x)
计算 @var{x} 的反正切.

@item atan2(x, y)
计算 @var{y}/@var{x} 反正切的主值.

@item between(x, min, max)
如果 @var{x} 大于或等于 @var{min} 并且小于或等于 @var{max} 返回 1, 否则返回 0

@item bitand(x, y)
@item bitor(x, y)
对 @var{x} 和 @var{y} 按位与/或计算.
在做按位计算之前，需要确保 @var{x} 和 @var{y} 是整数
注意: 对整数的转换和转换回浮点数的转换可能会失去精度。要当心大数字的意外结果 (通常是 2^53 并且更大).

@item ceil(expr)
四舍五入 @var{expr} 到最近的比原值大的整数值, 例如: "ceil(1.5)" 的值是 "2.0".

@item clip(x, min, max)
返回 @var{min} 最小值和 @var{max} 最大值之间的值

@item cos(x)
计算 @var{x} 的余弦.

@item cosh(x)
计算 @var{x} 的双曲余弦

@item eq(x, y)
如果 @var{x} 和 @var{y} 相等返回 1, 否则返回 0.

@item exp(x)
计算 @var{x} 的指数(以e为底的欧拉数).

@item floor(expr)
将表达式的值四舍五入到最近的比原值小的整数,例如: "floor(-1.5)" 是 "-2.0".

@item gauss(x)
计算 @var{x} 的高斯函数, 与 @code{exp(-x*x/2) / sqrt(2*PI)} 一致.

@item gcd(x, y)
返回 @var{x} 和 @var{y} 的最大公约数. 如果 @var{x} 和 @var{y} 是 0 或者都小于 0 则未定义.

@item gt(x, y)
如果 @var{x} 大于 @var{y} 返回 1, 否则返回 0.

@item gte(x, y)
如果 @var{x} 大于或者等于 @var{y} 返回 1, 否则返回 0.

@item hypot(x, y)
这个函数和 C 语言的函数名称相同; 返回的是 "sqrt(@var{x}*@var{x} + @var{y}*@var{y})",
也就是直角三角形斜边的长度, @var{x} 和 @var{y} 是两个直角边或者原点到 @var{x} 和到 @var{y} 的举例.

@item if(x, y)
判断 @var{x}, 如果不是 0 就返回 @var{y} 判断的值，否则返回 0.

@item if(x, y, z)
判断 @var{x}, 如果不是 0 就返回 @var{y} 判断的值，否则返回 @var{z} 判断的值

@item ifnot(x, y)
判断 @var{x}, 如果是 0 就返回 @var{y} 判断的值，否则返回 0.

@item ifnot(x, y, z)
判断 @var{x}, 如果是 0 就返回 @var{y} 判断的值，否则返回 @var{z} 判断的值

@item isinf(x)
如果 @var{x} 是 +/-无穷大返回 1.0，否则返回0.0.

@item isnan(x)
如果 @var{x} 是 NAN 返回 1.0，否则返回 0.0.

@item ld(var)
加载内部变量 @var{var} 的值，这个变量存储在st(@var{var}, @var{expr}).
函数返回加载的值.

@item log(x)
计算 @var{x} 的自然对数.

@item lt(x, y)
如果 @var{x} 小于 @var{y} 则返回 1, 否则返回 0.

@item lte(x, y)
如果 @var{x} 小于或者等于 @var{y} 则返回 1, 否则返回 0.

@item max(x, y)
返回 @var{x} 和 @var{y} 的最大值

@item min(x, y)
返回 @var{x} 和 @var{y} 的最小值

@item mod(x, y)
计算 @var{x} 除以 @var{y} 的余数

@item not(expr)
如果 @var{expr} 是 0 返回 1.0， 否则返回 0.0.

@item pow(x, y)
计算 @var{x} 的 @var{y} 次幂，相当于 "(@var{x})^(@var{y})".

@item print(t)
@item print(t, l)
打印 loglevel 是 @var{l} 的表达式 @var{t}. 如果 @var{l} 没有值就使用默认的 loglevel.
返回表达式打印出来的内容.

打印 l 级别的 t

@item random(x)
在 0.0 和 1.0 之间返回一个伪随机值. @var{x} 是内部变量的索引它将被用来保存 seed/state.

@item root(expr, max)
找一个输入的值  @var{ld(0)} 是在间隔 0..@var{max} 里面的 0;

@var{expr} 中的表达式必须表示一个连续函数，否则结果是未定义的.

@var{ld(0)} 用于表示函数输入值, 这意味着给定的表达式将被多次求值,
并且表达式可以通过 @var{ld(0)} 来访问该表达式.
当表达式求值为 0 时,将返回相应的输入值.

@item round(expr)
将表达式的值四舍五入到最近的整数. 例如: round(1.5)" 是 "2.0".

@item sin(x)
计算 @var{x} 的正弦.

@item sinh(x)
计算 @var{x} 的双曲正弦.

@item sqrt(expr)
计算 @var{expr} 的平方根. 这相当于 "(@var{expr})^.5".

@item squish(x)
计算表达式 @code{1/(1 + exp(4*x))}.

@item st(var, expr)
将表达式 @var{expr} 的值存储在一个内部变量中. @var{var} 指定了存储该值的变量的数量,
它的值从 0 到 9. 函数返回存储在内部变量中的值.
注意: 变量当前不是在表达式之间共享的.

@item tan(x)
计算 @var{x} 的正切.

@item tanh(x)
计算 @var{x} 的双曲正切.

@item taylor(expr, x)
@item taylor(expr, x, id)
求 @var{x} 的泰勒级数, 给出一个表示函数在 0 处的导数的表达式 @var{ls(id)}。

当级数不收敛时,结果未定义.

@var{ld(id)} 用于表示 @var{expr} 中的派生顺序,这意味着给定的表达式将多次使用表达式可以通过 @code{ld(id)} 访问的各种输入值进行计算.
如果没有指定 @var{id} 则假定为0.

注意: 当你用 y 而不是 0 时, 可以用 @code{taylor(expr, x-y)}.

@item time(0)
返回当前时间 (Wallclock) 秒为单位.

@item trunc(expr)
将表达式 @var{expr} 的值四舍五入为 0 到最近的整数, 例如: "trunc(-1.5)" 是 "-1.0".

@item while(cond, expr)
当表达式 @var{cond} 非 0 时求表达式 @var{expr} 的值，并且返回表达式 @var{expr} 的值,
如果 @var{cond} 的结果一直是 false 的话，就返回NAN.
@end table

下边这些常量是可用的:
@table @option
@item PI
圆周率派. 3.14
@item E
自然对数的底数, 是一个无理数, 约等于2.718
@item PHI
黄金比例 (1+sqrt(5))/2, 约等于 1.618
@end table

假设一个表达式被认为是"真"如果它有非零值
注意：

@code{*} 像AND一样工作

@code{+} 像OR一样工作

例如下面构建的例子：
@example
if (A AND B) then C
@end example
等同于：
@example
if(A*B, C)
@end example

在您的C代码中，您可以扩展unary和二进制函数的列表，并定义已识别的常量，
以便它们可以用于您的表达式。

评估是根据能识别的国际系统单位前缀。如果“i”是在前缀后面加的，则使用二进制前缀，
它基于1024的幂而不是1000的幂。“B”后缀将值乘以8，并且可以在一个单元前缀或单独使用后附加。
这允许使用“KB”、“MiB”、“G”和“B”作为数字后缀。

可用的国际系统前缀的列表如下，显示了10和2的相应的幂。
@table @option
@item y
10^-24 / 2^-80
@item z
10^-21 / 2^-70
@item a
10^-18 / 2^-60
@item f
10^-15 / 2^-50
@item p
10^-12 / 2^-40
@item n
10^-9 / 2^-30
@item u
10^-6 / 2^-20
@item m
10^-3 / 2^-10
@item c
10^-2
@item d
10^-1
@item h
10^2
@item k
10^3 / 2^10
@item K
10^3 / 2^10
@item M
10^6 / 2^20
@item G
10^9 / 2^30
@item T
10^12 / 2^40
@item P
10^15 / 2^40
@item E
10^18 / 2^50
@item Z
10^21 / 2^60
@item Y
10^24 / 2^70
@end table

@c man end EXPRESSION EVALUATION

@chapter OpenCL操作
@c man begin OPENCL OPTIONS

当FFmpeg的编译配置选项加上了@code{--enable-opencl}，FFmpeg将会支持全局的OpenCL的上下文

支持的选项列表如下：

@table @option
@item build_options

设置用于编译已注册内核的构建选项。

参见参考“OpenCL规范版本:1.2章5.6.4”。

@item platform_idx
选择平台的索引来运行OpenCL代码。

指定的索引必须是设备列表中的索引之一，它可以使用ffmpeg的 @code{-opencl_bench}或@code{av_opencl_get_device_list()}获得。

@item device_idx
选择用于运行OpenCL代码的设备的索引。


指定的索引必须是设备列表中的索引之一，它可以使用ffmpeg的 @code{-opencl_bench}或@code{av_opencl_get_device_list()}获得。

@end table

@c man end OPENCL OPTIONS
